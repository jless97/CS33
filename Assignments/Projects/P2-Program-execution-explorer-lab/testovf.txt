//testovf.txt
//Examine integer overflow handling:

C code:

#include <limits.h>
  #include <stdbool.h>
  long big = LONG_MAX;
  bool
  testovf (void)
  {
    return big + LONG_MAX < big;
  }


———————————————————————————————————————————————————————————————————————————————
(1) -O2:

testovf:
LFB0:
	xorl	%eax, %eax
	ret

Analysis of -O2:

The only line of code generated using -O2 optimization is an exclusive-or
of the return register with itself. This instruction clears out the return 
register, and thus this shows that the function always returns false. O2 
optimization is used for higher program performance, and therefore, the 
above assembly code does so in the most efficient manner possible. 

I believe that the -O2 optimization treats the function such that the result 
of the addition of two numbers cannot be less than any one of the operands, and as
a result, it doesn’t even address the overflow.

———————————————————————————————————————————————————————————————————————————————
(2) -O2 -fsanitize=undefined: 

testovf:
LFB0:
	movabsq	$9223372036854775807, %rdx
	pushq	%rbp
LCFI0:
	pushq	%rbx
LCFI1:
	subq	$8, %rsp
LCFI2:
	movq	_big(%rip), %rbx
	movq	%rbx, %rbp
	addq	%rdx, %rbp
	jo	L6
L2:
	cmpq	%rbp, %rbx
	setg	%al
	addq	$8, %rsp
LCFI3:
	popq	%rbx
LCFI4:
	popq	%rbp
LCFI5:
	ret
L6:
LCFI6:
	leaq	Lubsan_data0(%rip), %rdi
	movq	%rbx, %rsi
	call	___ubsan_handle_add_overflow
	jmp	L2

Analysis of -O2 -fsanitize=undefined:

The first line of assembly code places LONG_MAX into the %rdx register. A couple
lines later, the addition of big and LONG_MAX takes place. Now the line after
“jo L6” deals with the result of the addition. The instruction equates to jump to
L6 if there is overflow, and to continue to L2 if no overflow occurs. As overflow
does occur in the function, the control jumps to L6 where a call to 
__upsan_handle_add_overflow takes place. This instruction prints out an error 
message stating overflow during runtime, however, the program doesn’t stop, and in
fact continues to L2 where the comparison of big + LONG_MAX to big takes place. As
a result, this version will handle the overflow with the default behavior of the 
computer (i.e. trap or wrap). This is because -O2 -fsanitize=undefined works as 
an undefined behavior tracker that will print out an error message if an undefined 
behavior occurs during execution (i.e. overflow), but still continues to execute 
the code.

———————————————————————————————————————————————————————————————————————————————
(3) -O2 -fwrapv:

testovf:
LFB0:
	movq	_big(%rip), %rdx
	movabsq	$9223372036854775807, %rax
	addq	%rdx, %rax
	cmpq	%rax, %rdx
	setg	%al
	ret                  	

Analysis of -O2 -fwrapv:

The first line of assembly code places the LONG_MAX value into the big variable. 
It then goes to place LONG_MAX into the %rdx register. The next line does the 
addition of big and LONG_MAX, and the line after, does the inequality comparison. 
As can be seen in this version, and unlike just -O2 is that it actually deals with
the overflow, but does so by wrapping around when the overflow occurs. Because 
wrap-around occurs in this version, it will result in a smaller number, and thus,
when comparing the smaller number to big (i.e. smaller number < big), it returns 
true. 

———————————————————————————————————————————————————————————————————————————————
Comparison:

As described above, all three versions yield different results. The -O2 
optimization in this case choose to always return false, and deal with the 
overflow. This is because it assumes that the result of addition is larger than
any of its operands, and thus doesn’t check for overflow. The -O2 
-fsanitize=undefined and -fwrapv actually acknowledge that overflow occurs, but
they do so differently. -fsanitize=undefined prints out an error message when 
undefined behavior occurs (which it does in this case), and then continues to
execute the rest of the code, and return undefined behavior based on the default 
setting of the computer. On the other hand, -fwrapv deals with the overflow in 
the function by wrapping around, and returning true. 













